generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  userImage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plants    Plant[]
  rooms     RoomUsers[]
  ownedRooms Room[]
}

model Plant {
  id        String   @id @default(cuid())
  name      String?
  type      String?
  ownerId   String?
  token     String  @unique
  imageUrl  String?
  pairingCode String @unique
  paired    Boolean @default(false)
  userPaired Boolean @default(false)
  owner     User?     @relation(fields: [ownerId], references: [id])
  roomId    String?
  room      Room?    @relation(fields: [roomId], references: [id])
  tasks     Task[]
  measurements Measurement[]
  lastHeartbeat DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id        String   @id @default(cuid())
  name      String
  completed Boolean
  success   Boolean
  plantId   String
  plant     Plant    @relation(fields: [plantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  inviteCode String @unique
  plants    Plant[]
  users     RoomUsers[]
  owner     User     @relation(fields: [ownerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoomUsers {
  id     String @id @default(cuid())
  userId String
  roomId String
  user   User   @relation(fields: [userId], references: [id])
  room   Room   @relation(fields: [roomId], references: [id])
}

model Measurement {
  id        String   @id @default(cuid())
  value     Float
  unit      String
  measurementType String
  plantId   String
  plant     Plant    @relation(fields: [plantId], references: [id])
  createdAt DateTime @default(now())
}
