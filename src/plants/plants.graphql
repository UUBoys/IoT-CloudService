type Plant {
  id: String!
  type: String!
  name: String!
  room: Room
  imageUrl: String
  lastHeartbeat: String
  measurements: [Measurement]
}

input PairPlantInput {
  name: String!
  type: String!
  pairingCode: String!
  imageUrl: String
}

input UpdatePlantInput {
  plantId: String
  name: String
  type: String
  imageUrl: String
}

type RemovePlantResponse {
  id: String!
  name: String!
  unpaired: Boolean!
}

type CheckPairingProcessResponse {
  userPaired: Boolean!
  serverPaired: Boolean!
  plantId: String!
}

type Query {
  plants: [Plant]!
  plant(id: String!): Plant
  checkPairingProcess(pairingCode: String!): CheckPairingProcessResponse!
}

type Mutation {
  pairPlant(pairPlantInput: PairPlantInput!): Plant!
  updatePlant(updatePlantInput: UpdatePlantInput!): Plant!
  removePlant(id: String!): RemovePlantResponse!
}
